1. 
a) CREATE SCHEMA library_management;
b) CREATE TABLE authors (
author_id INT AUTO_INCREMENT PRIMARY KEY,
author_name VARCHAR(50)
);

c) CREATE TABLE genres (
genre_id_id INT AUTO_INCREMENT PRIMARY KEY,
genre_name VARCHAR(50)
);

d) CREATE TABLE books (
book_id INT AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(50),
publication_year YEAR,
author_id INT,
FOREIGN KEY (author_id) REFERENCES authors(author_id),
genre_id INT,
FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);
e) CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(50)
);
f) CREATE TABLE borrowed_books (
borrow_id INT AUTO_INCREMENT PRIMARY KEY,
borrow_date DATE,
return_date DATE,
book_id INT,
FOREIGN KEY (book_id) REFERENCES books (book_id),
user_id INT,
FOREIGN KEY (user_id) REFERENCES users (user_id)
);

2. 
a) INSERT INTO `library_management`.`authors` (`author_id`, `author_name`) VALUES ('1', 'Khvylovyi');
INSERT INTO `library_management`.`authors` (`author_id`, `author_name`) VALUES ('2', 'Pidmohylnyi');
INSERT INTO `library_management`.`authors` (`author_id`, `author_name`) VALUES ('3', 'Zhadan');

b) INSERT INTO `library_management`.`genres` (`genre_id`, `genre_name`) VALUES ('11', 'novel');
INSERT INTO `library_management`.`genres` (`genre_id`, `genre_name`) VALUES ('22', 'drama');

c) INSERT INTO `library_management`.`users` (`user_id`, `username`, `email`) VALUES ('111', 'Max', 'max@gmail.com');
INSERT INTO `library_management`.`users` (`user_id`, `username`, `email`) VALUES ('112', 'Kira', 'kira@gmail.com');
INSERT INTO `library_management`.`users` (`user_id`, `username`, `email`) VALUES ('113', 'Vol', 'vol@gmail.com');

d) INSERT INTO `library_management`.`books` (`book_id`, `title`, `publication_year`, `author_id`, `genre_id`) VALUES ('101', 'Misto', 1928, '2', '11');
INSERT INTO `library_management`.`books` (`book_id`, `title`, `publication_year`, `author_id`, `genre_id`) VALUES ('102', 'Arabesky', 1927, '1', '22');
INSERT INTO `library_management`.`books` (`book_id`, `title`, `publication_year`, `author_id`, `genre_id`) VALUES ('103', 'Internat', 2017, '3', '11');

e) INSERT INTO `library_management`.`borrowed_books` (`borrow_id`, `borrow_date`, `return_date`, `book_id`, `user_id`) VALUES ('99', '2024-05-20', '2024-06-20', '101', '113');
INSERT INTO `library_management`.`borrowed_books` (`borrow_id`, `borrow_date`, `return_date`, `book_id`, `user_id`) VALUES ('109', '2024-05-25', '2024-06-25', '103', '111');
INSERT INTO `library_management`.`borrowed_books` (`borrow_id`, `borrow_date`, `return_date`, `book_id`, `user_id`) VALUES ('119', '2024-05-29', '2024-06-29', '102', '112');

3. 
USE hw3_schema;
SELECT *
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id

4. 
a) USE hw3_schema;
SELECT COUNT(*)
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id

b) USE hw3_schema;
SELECT COUNT(*)
FROM order_details
LEFT JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN products ON order_details.product_id = products.id
LEFT JOIN categories ON products.category_id = categories.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
RIGHT JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id

Кількість рядків залишається такою ж самою, бо якщо немає відповідності певному значенню в правій чи лівій таблиці, то виводиться NULL і кількість рядків не змінюється.

c) USE hw3_schema;
SELECT *
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id
WHERE employees.employee_id > 3 and employees.employee_id <= 10;

d) USE hw3_schema;
SELECT categories.name as category_name,
COUNT(*)  as row_count,
AVG(order_details.quantity) as avg_quantity
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name;

e) COUNT(*)  as row_count,
AVG(order_details.quantity) as avg_quantity
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name
HAVING avg_quantity > 21;

f) USE hw3_schema;
SELECT categories.name as category_name,
COUNT(*)  as row_count,
AVG(order_details.quantity) as avg_quantity
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name
HAVING avg_quantity > 21
ORDER BY row_count DESC;

g) USE hw3_schema;
SELECT categories.name as category_name,
COUNT(*)  as row_count,
AVG(order_details.quantity) as avg_quantity
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name
HAVING avg_quantity > 21
ORDER BY row_count DESC
LIMIT 4 OFFSET 1;